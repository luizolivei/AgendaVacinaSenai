/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import dao.Conexao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.ResolverStyle;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author linco
 */
public class Agenda extends javax.swing.JFrame {
    Vector<Integer> listaPaciente = new Vector<Integer>();
    Vector<Integer> listaVacinas = new Vector<Integer>();
    
    
    public Agenda() {
        initComponents();
        carregarCampoPacientes();
        carregarTabela();
        carregarCampoVacinas();
      
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ID = new javax.swing.JLabel();
        pacinte = new javax.swing.JLabel();
        vacina = new javax.swing.JLabel();
        OBs = new javax.swing.JLabel();
        campoDataHora = new javax.swing.JLabel();
        campoID = new javax.swing.JTextField();
        campoPaciente = new javax.swing.JComboBox<>();
        campoVacina = new javax.swing.JComboBox<>();
        campoObs = new javax.swing.JTextField();
        campoData = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data = new javax.swing.text.MaskFormatter("##/##/####");
            campoData = new javax.swing.JFormattedTextField(data);
        } catch (Exception e) {
        }
        campoHora = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAgenda = new javax.swing.JTable();
        btnCadastrar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        menuVacina = new javax.swing.JMenuItem();
        menuPaciente = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agenda de Vacinação");
        setMaximumSize(new java.awt.Dimension(900, 500));
        setPreferredSize(new java.awt.Dimension(900, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 500));

        ID.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        ID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ID.setText("ID");

        pacinte.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        pacinte.setText("Paciente");

        vacina.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        vacina.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        vacina.setText("Vacina");

        OBs.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        OBs.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        OBs.setText("Observações");

        campoDataHora.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        campoDataHora.setText("Data/Hora");

        campoID.setEditable(false);
        campoID.setBackground(new java.awt.Color(204, 204, 204));
        campoID.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        campoID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIDActionPerformed(evt);
            }
        });

        campoPaciente.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        campoPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[Selecione]" }));
        campoPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPacienteActionPerformed(evt);
            }
        });

        campoVacina.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        campoVacina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[Selecione]" }));
        campoVacina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoVacinaActionPerformed(evt);
            }
        });

        campoObs.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        campoData.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        campoData.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        campoHora.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        campoHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[Selecione]", "08:00", "08:15", "08:30", "08:45", "09:00", "09:30", "09:45", "10:00", "10:15", "10:30", "10:45", "11:00", "11:15", "11:30", "11:45" }));

        tabelaAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Data", "Hora", "ID Paciente", "Paciente", "ID Vacina", "Vacina", "Observações"
            }
        ));
        tabelaAgenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaAgendaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaAgenda);

        btnCadastrar.setFont(new java.awt.Font("Gabriola", 1, 18)); // NOI18N
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Gabriola", 1, 18)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Gabriola", 1, 18)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Gabriola", 1, 18)); // NOI18N
        jButton4.setText("Vacinar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jMenu2.setText("Cadastros");
        jMenu2.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N

        menuVacina.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N
        menuVacina.setText("Vacinas");
        menuVacina.setBorderPainted(false);
        menuVacina.setInheritsPopupMenu(true);
        menuVacina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVacinaActionPerformed(evt);
            }
        });
        jMenu2.add(menuVacina);

        menuPaciente.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N
        menuPaciente.setText("Pacientes");
        menuPaciente.setBorderPainted(false);
        menuPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPacienteActionPerformed(evt);
            }
        });
        jMenu2.add(menuPaciente);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Agenda");
        jMenu1.setEnabled(false);
        jMenu1.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pacinte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(campoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vacina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(OBs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(campoVacina, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(campoDataHora)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(campoHora, 0, 1, Short.MAX_VALUE))
                                    .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(campoObs, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(43, 43, 43))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ID)
                    .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pacinte)
                    .addComponent(campoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vacina)
                    .addComponent(campoVacina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoDataHora)
                    .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OBs)
                    .addComponent(campoObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void campoIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIDActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_campoIDActionPerformed

    private void campoPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoPacienteActionPerformed

    private void menuVacinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVacinaActionPerformed
        this.dispose();
        Vacinas vacinas = new Vacinas();
        vacinas.setVisible(true);
        vacinas.carregarTabela();
    }//GEN-LAST:event_menuVacinaActionPerformed

    private void menuPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPacienteActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Pacientes pacientes = new Pacientes();
       
        pacientes.setVisible(true);
    }//GEN-LAST:event_menuPacienteActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        inserirAgenda();
        carregarTabela();
        
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void tabelaAgendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaAgendaMouseClicked
        // TODO add your handling code here:
        
        int linha = tabelaAgenda.getSelectedRow();
        campoID.setText(tabelaAgenda.getValueAt(linha, 0).toString());
        campoPaciente.setSelectedItem(tabelaAgenda.getValueAt(linha, 4));
        campoVacina.setSelectedItem(tabelaAgenda.getValueAt(linha, 6));
        campoData.setText(tabelaAgenda.getValueAt(linha, 1).toString());
        campoHora.setSelectedItem(tabelaAgenda.getValueAt(linha, 2));
        campoObs.setText(tabelaAgenda.getValueAt(linha, 7).toString());
        //mudaNomeCadastrar();
        
    }//GEN-LAST:event_tabelaAgendaMouseClicked

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this,"Deseja realmente alterar esses dados? ", "Confirma", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
      
        if(confirma==JOptionPane.YES_OPTION){
            if(isCadastroValido()){
            atualizarAgenda();
            carregarTabela();
            }
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void campoVacinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoVacinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoVacinaActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this,"Deseja realmente Excluir? ", "Confirma", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(confirma==JOptionPane.YES_OPTION){
            excluirAgenda();
            carregarTabela();
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Vacina efetuada");
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Darcula".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agenda().setVisible(true);
            }
        });
    }
    
    
    private void carregarCampoPacientes() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "select pc_id, pc_nome from paciente order by pc_nome";
            PreparedStatement ps = con.prepareStatement(sql);
            
            // Executa a consulta no banco, para obter os dados
            ResultSet rs = ps.executeQuery();
            // Faz loop para inserir valores no combobox
            while (rs.next()) {
                // Primeiro insere o ID do banco no vetor
                // Com essa informacao, podemos comparar a posicao do item no combobox
                // com a posicao do item no vetor, e pegar o ID correspondente
                listaPaciente.addElement(rs.getInt(1));
                // Depois insere a descrição no combobox
                campoPaciente.addItem(rs.getString(2));
            }
            ps.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro carregar campo Cliente!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao carregar campo Cliente: " + e);
        }
    }
        
    public boolean dataHoraValida(String dataHora) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/uuuu").withResolverStyle(ResolverStyle.STRICT);
            LocalDate d = LocalDate.parse(dataHora, formatter);
            System.out.println("Data/Hora valida: " + dataHora);
            return true;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Data/Hora invalida: " + dataHora);
            return false;
        }
    }
        
    public boolean isCadastroValido() {
        boolean valido = false;
        String dataHora = campoData.getText();
        if (campoPaciente.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Selecione o Paciente!");
        } else if (campoVacina.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Selecione a Vacina!");
        } else if (!dataHoraValida(dataHora)) {
            JOptionPane.showMessageDialog(null, "Informe uma data e hora válida!");
        } else {
            valido = true;
        }
        return valido;
    }
        
    public void inserirAgenda() {
        try {
            
            
            String dataHora = campoData.getText() + " " + campoHora.getSelectedItem();
            SimpleDateFormat formato = new SimpleDateFormat("yyyy/MM/dd hh:mm");
            Date dataFormatada = new SimpleDateFormat("dd/MM/yyyy hh:mm").parse(dataHora);
            String dataBD = formato.format(dataFormatada);

            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sqlData = "select * from agendavacina.agenda where ag_data = ?";
            PreparedStatement psData = con.prepareStatement(sqlData);
            psData.setString(1, dataBD);
            
            // Executa a consulta no banco, para obter os dados
            ResultSet rs = psData.executeQuery();
            // Se o mesmo dia e horario ja estiver agendado retorna o aviso e encerra a conexão
            if (rs.next()) {
                JOptionPane.showMessageDialog(null, "Agenda Ocupada, selecione outro Dia/Hora");
                psData.close();
                con.close();
            }else{
                
                if (isCadastroValido()) {
                //Connection con = Conexao.conector();

                String sql = "insert into agenda(ag_data,ag_obs,vacina_vc_id, paciente_pc_id) values (?,?,?,?)";
                PreparedStatement ps = con.prepareStatement(sql);

                String idPaciente = listaPaciente.get(campoPaciente.getSelectedIndex() - 1).toString();
                System.out.println("id paciente "+idPaciente);
                String idVacina = listaVacinas.get(campoVacina.getSelectedIndex()-1).toString();
                System.out.println("id vacina "+idVacina);
                

                /* Preparar a data para salvar no banco */
                
                        

                //ps.setString(1, idPaciente);
                ps.setString(1, dataBD);
                //ps.setString(3, dataBD);
                ps.setString(2, campoObs.getText());
                ps.setString(3, idVacina);
                ps.setString(4, idPaciente);

                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Agendamento registrado com sucesso!");
                limparCampos();

                ps.close();
                con.close();

            }
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Erro ao registrar agendamento!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void limparCampos() {
        ID.setText("");
        campoPaciente.setSelectedIndex(0);
        campoVacina.setSelectedIndex(0);
        campoData.setText("");
        campoHora.setSelectedIndex(0);
        OBs.setText("");
    }
    
    public void carregarTabela() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "select a.ag_id, date_format(a.ag_data,'%d/%m/%Y') ag_data, date_format(a.ag_data,'%H:%i') ag_hora, a.paciente_pc_id, p.pc_nome, a.vacina_vc_id, v.vc_desc, a.ag_obs FROM agenda a JOIN vacina v ON a.vacina_vc_id = v.vc_id JOIN paciente p ON a.paciente_pc_id = p.pc_id;";
            PreparedStatement ps = con.prepareStatement(sql);
            // Executa a consulta, atribuindo resultado para a variavel rs
            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tabelaAgenda.getModel();
            model.setNumRows(0);

            while (rs.next()) {
                model.addRow(new Object[]{
                    // retorna os dados da tabela do BD, cada campo e um coluna.
                    rs.getInt("ag_id"),
                    rs.getString("ag_data"),
                    rs.getString("ag_hora"),
                    rs.getString("paciente_pc_id"),
                    rs.getString("pc_nome"),
                    rs.getString("vacina_vc_id"),
                    rs.getString("vc_desc"),
                    rs.getString("ag_obs")
                });
            }
            ps.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar tabela!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao carregar tabela: " + e);
        }
    }
    
    public void carregarDadoCampoHora(String hora) {
        for (int i = 0; i < campoHora.getItemCount(); i++) {
            if (hora.equals(campoHora.getItemAt(i))) {
                campoHora.setSelectedIndex(i);
            }
        }
    }
    
    public void carregarDadoCampoPaciente(int idPaciente) {
        for (int i = 0; i < listaPaciente.size(); i++) {
            if (idPaciente == listaPaciente.get(i)) {
                System.out.println(listaPaciente.get(i));
                System.out.println(listaPaciente.indexOf(idPaciente));
                campoPaciente.setSelectedIndex(listaPaciente.indexOf(idPaciente) + 1);
            }
        }
    }
    
    public void carregarDadoCampoVacina(int idVacina) {
        for (int i = 0; i < listaPaciente.size(); i++) {
            if (idVacina == listaPaciente.get(i)) {
                System.out.println(listaPaciente.get(i));
                System.out.println(listaPaciente.indexOf(idVacina));
                campoVacina.setSelectedIndex(listaPaciente.indexOf(idVacina) + 1);
            }
        }
    }
    
    private void carregarCampoVacinas() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "select vc_id, vc_desc from vacina order by vc_desc";
            PreparedStatement ps = con.prepareStatement(sql);
            
            // Executa a consulta no banco, para obter os dados
            ResultSet rs = ps.executeQuery();
            // Faz loop para inserir valores no combobox
            while (rs.next()) {
                // Primeiro insere o ID do banco no vetor
                // Com essa informacao, podemos comparar a posicao do item no combobox
                // com a posicao do item no vetor, e pegar o ID correspondente
                listaVacinas.addElement(rs.getInt(1));
                // Depois insere a descrição no combobox
                campoVacina.addItem(rs.getString(2));
            }
            ps.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro carregar campo Vacinas!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao carregar campo Vacinas: " + e);
        }
    }
    
    public void atualizarAgenda() {
        try {
            String dataHora = campoData.getText() + " " + campoHora.getSelectedItem();
            SimpleDateFormat formato = new SimpleDateFormat("yyyy/MM/dd hh:mm");
            Date dataFormatada = new SimpleDateFormat("dd/MM/yyyy hh:mm").parse(dataHora);
            String dataBD = formato.format(dataFormatada);
            String ID = campoID.getText();
            System.out.println("ID "+ID);
            
            
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sqlData = "select * from agendavacina.agenda where ag_data = ?";
            PreparedStatement psData = con.prepareStatement(sqlData);
            psData.setString(1, dataBD);
            
            String sqlID = "select * from agendavacina.agenda where ag_id = ?";
            PreparedStatement psID = con.prepareStatement(sqlID);
            psID.setString(1, ID);
            
            
            // Executa a consulta no banco, para obter os dados
            ResultSet rs = psData.executeQuery();
            ResultSet rsID = psID.executeQuery();
            // Se o mesmo dia e horario ja estiver agendado  e não for o mesmo paciente retorna o aviso e encerra a conexão
            if (rs.next()&&!rsID.next()) {
                JOptionPane.showMessageDialog(null, "Agenda Ocupada, selecione outro Dia/Hora");
                psData.close();
                con.close();
                
            }else if (!rs.next()){ // Se a consulta não retornar nada na data a agenda está disponível
                // Monta a consulta SQL e prepara para executar
                String sql = "update agenda a join vacina v on a.vacina_vc_id = v.vc_id join paciente p ON a.paciente_pc_id = p.pc_id set a.ag_data = ?, a.ag_obs = ?, p.pc_nome = ?, v.vc_desc = ? WHERE a.ag_id = ?";
                PreparedStatement ps = con.prepareStatement(sql);
                // Define os dados para atualizar
                String paciente = campoPaciente.getSelectedItem().toString();
                String vacina = campoVacina.getSelectedItem().toString();


                ps.setString(1, dataBD);
                ps.setString(2, campoObs.getText());
                ps.setString(3, campoPaciente.getSelectedItem().toString());
                ps.setString(4, campoVacina.getSelectedItem().toString());
                ps.setString(5, campoID.getText());
                // Executa a acao para inserir o registro no banco
                ps.executeUpdate();
                // Mensagem de confirmacao do cadastro
                JOptionPane.showMessageDialog(null, "Agenda atualizado com sucesso!");
                // Limpa campos
                //campoID.setText("");
                //campoNome.setText("");
                //campoCPF.setText("");
                // Finaliza conexao
                ps.close();
                con.close();
                carregarTabela();
                }
            else if (rs.next()&& rsID.next()){//Se a consulta retornar a data e e 
                JOptionPane.showMessageDialog(null, "Agenda atualizado com sucesso o Horario ja era desse paciente!");
                
            }
            
            else{
                JOptionPane.showMessageDialog(null, "Data e horario já ocupado, selecione outro");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar registro!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao atualizar registro: " + e);
        }
    }
    
    public void excluirAgenda() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "delete from agendavacina.agenda where ag_id = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            // Define o ID que deve ser excluido
            ps.setString(1, campoID.getText());
            System.out.println("campo id "+campoID.getText());
            // Executa a acao para excluir o registro do banco
            ps.executeUpdate();
            // Mensagem de confirmacao do cadastro
            JOptionPane.showMessageDialog(null, "Agendamento excluído com sucesso!");
            // Limpa campos
            campoID.setText("");
            campoPaciente.setSelectedIndex(0);
            campoVacina.setSelectedIndex(0);
            campoData.setText("");
            campoHora.setSelectedIndex(0);
            campoObs.setText("");
            // Finaliza conexao
            ps.close();
            con.close();
        } catch (Exception e) {
        }
    }
    
    public void mudaNomeCadastrar(){
        if (campoID.getText().isEmpty()){
            btnCadastrar.setText("Salvar");
        }else{
            btnCadastrar.setText("Novo Cadastro");
        }
    }
    
     private void verificaAgendas() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "select ag_data from agendavacina.agenda";
            PreparedStatement ps = con.prepareStatement(sql);
            
            // Executa a consulta no banco, para obter os dados
            ResultSet rs = ps.executeQuery();
            // Faz loop para inserir valores no combobox
            if (rs.next()) {
                JOptionPane.showMessageDialog(null, "Agenda Ocupada, selecione outro Dia/Hora");
                ps.close();
                con.close();
            }else{
                inserirAgenda();
            }
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro carregar campo Vacinas!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao carregar campo Vacinas: " + e);
        }
    }
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ID;
    private javax.swing.JLabel OBs;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JTextField campoData;
    private javax.swing.JLabel campoDataHora;
    private javax.swing.JComboBox<String> campoHora;
    private javax.swing.JTextField campoID;
    private javax.swing.JTextField campoObs;
    private javax.swing.JComboBox<String> campoPaciente;
    private javax.swing.JComboBox<String> campoVacina;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem menuPaciente;
    private javax.swing.JMenuItem menuVacina;
    private javax.swing.JLabel pacinte;
    private javax.swing.JTable tabelaAgenda;
    private javax.swing.JLabel vacina;
    // End of variables declaration//GEN-END:variables
}
