/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import dao.Conexao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.ResolverStyle;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author linco
 */
public class Vacinas extends javax.swing.JFrame {

    /**
     * Creates new form Vacinas
     */
    public Vacinas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        campoDescricao = new javax.swing.JTextField();
        campoLaboratorio = new javax.swing.JTextField();
        campoID = new javax.swing.JTextField();
        campoValidade = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter dataVal = new javax.swing.text.MaskFormatter("##/##/####");
            campoValidade = new javax.swing.JFormattedTextField(dataVal);
        } catch (Exception e) {
        }
        campoLote = new javax.swing.JTextField();
        campoObs = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaVacina = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastro de Vacinas");
        setMaximumSize(new java.awt.Dimension(900, 500));
        setPreferredSize(new java.awt.Dimension(900, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 500));

        jLabel1.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        jLabel2.setText("Descrição");

        jLabel3.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        jLabel3.setText("Laboratorio");

        jLabel4.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        jLabel4.setText("Lote");

        jLabel5.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        jLabel5.setText("Validade");

        jLabel7.setFont(new java.awt.Font("Gabriola", 1, 22)); // NOI18N
        jLabel7.setText("Observação");

        campoDescricao.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        campoLaboratorio.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        campoID.setEditable(false);
        campoID.setBackground(new java.awt.Color(204, 204, 204));
        campoID.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        campoValidade.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        campoValidade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoValidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoValidadeActionPerformed(evt);
            }
        });

        campoLote.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        campoLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoLoteActionPerformed(evt);
            }
        });

        campoObs.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Gabriola", 1, 18)); // NOI18N
        jButton1.setText("Cadastrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Gabriola", 1, 18)); // NOI18N
        jButton2.setText("Editar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Gabriola", 1, 18)); // NOI18N
        jButton3.setText("Excluir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tabelaVacina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Descrição", "Laboratorio", "Lote", "Validade", "Observacao"
            }
        ));
        tabelaVacina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaVacinaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaVacina);

        jMenu1.setText("Cadastro");
        jMenu1.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N
        jMenuItem1.setText("Vacinas");
        jMenuItem1.setEnabled(false);
        jMenuItem1.setInheritsPopupMenu(true);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N
        jMenuItem2.setText("Pacientes");
        jMenuItem2.setInheritsPopupMenu(true);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Agenda");
        jMenu2.setFont(new java.awt.Font("Gabriola", 0, 18)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(campoValidade, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(campoObs))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoLaboratorio, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(campoLote, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(campoDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(campoDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(campoLote)
                    .addComponent(campoLaboratorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(campoValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(campoObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("Vacinas");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void campoLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoLoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoLoteActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Pacientes pacientes =  new Pacientes();
        pacientes.setVisible(true);
                
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Agenda agenda = new Agenda();
        agenda.setVisible(true);
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        this.dispose();
        Agenda agenda = new Agenda();
        agenda.setVisible(true);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        Vacinas_Tela_Cadastro telaVacina = new Vacinas_Tela_Cadastro();
        telaVacina.setVisible(true);
        this.dispose();
              
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tabelaVacinaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaVacinaMouseClicked
        int linha = tabelaVacina.getSelectedRow();
        campoID.setText(tabelaVacina.getValueAt(linha, 0).toString());
        campoDescricao.setText(tabelaVacina.getValueAt(linha, 1).toString());
        campoLaboratorio.setText(tabelaVacina.getValueAt(linha, 2).toString());
        campoLote.setText(tabelaVacina.getValueAt(linha, 3).toString());
        campoValidade.setText(tabelaVacina.getValueAt(linha, 4).toString());
        campoObs.setText(tabelaVacina.getValueAt(linha, 5).toString());
    }//GEN-LAST:event_tabelaVacinaMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this,"Deseja realmente alterar esses dados? ", "Confirma", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(confirma==JOptionPane.YES_OPTION){
            if(isDataValida()){
            atualizarVacina();
            carregarTabela();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this,"Deseja realmente excluir? ", "Confirma", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(confirma==JOptionPane.YES_OPTION){
            excluirVacina();
            carregarTabela();
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void campoValidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoValidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoValidadeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vacinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vacinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vacinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vacinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vacinas().setVisible(true);
            }
        });
    }
    
    public void inserirCadastro() {
        try {
            
            
            
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "insert into vacina(vc_desc, vc_laboratorio, vc_lote, vc_validade, vc_obs) values (?,?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(sql);
            
            String dataHora = campoValidade.getText();
            SimpleDateFormat formato = new SimpleDateFormat("yyyy/MM/dd");
            Date dataFormatada = new SimpleDateFormat("dd/MM/yyyy").parse(dataHora);
            String dataBD = formato.format(dataFormatada);
            
            // Define os dados para inserir
            ps.setString(1, campoDescricao.getText());
            ps.setString(2, campoLaboratorio.getText());
            ps.setString(3, campoLote.getText());
            ps.setString(4, dataBD);
            ps.setString(5, campoObs.getText());
            // Executa a acao para inserir o registro no banco
            ps.executeUpdate();
            // Mensagem de confirmacao do cadastro
            JOptionPane.showMessageDialog(null, "Vacina cadastrada com sucesso!");
            // Limpa campos
            campoID.setText("");
            campoDescricao.setText("");
            campoLote.setText("");
            campoValidade.setText("");
            campoObs.setText("");
            // Finaliza conexao
            ps.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao inserir registro!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao inserir registro: " + e);
        }
    }
    
    
    public void carregarTabela() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "select vc_id, vc_desc, vc_laboratorio, vc_lote, date_format(vc_validade,'%d/%m/%Y')vc_validade, vc_obs from vacina";
            PreparedStatement ps = con.prepareStatement(sql);
            // Executa a consulta, atribuindo resultado para a variavel rs
            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tabelaVacina.getModel();
            model.setNumRows(0);

            while (rs.next()) {
                model.addRow(new Object[]{
                    // retorna os dados da tabela do BD, cada campo e um coluna.
                    rs.getInt("vc_id"),
                    rs.getString("vc_desc"),
                    rs.getString("vc_laboratorio"),
                    rs.getString("vc_lote"),
                    rs.getString("vc_validade"),
                    rs.getString("vc_obs")
                        
                });
            }
            ps.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar tabela!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao carregar tabela: " + e);
        }
    }
    
     public void atualizarVacina() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "UPDATE vacina SET vc_desc = ?, vc_laboratorio = ?, vc_lote = ?, vc_validade = ?, vc_obs = ? WHERE vc_id = ?";
            
            
            
            PreparedStatement ps = con.prepareStatement(sql);
            // Define os dados para atualizar
            
            String dataHora = campoValidade.getText();
            SimpleDateFormat formato = new SimpleDateFormat("yyyy/MM/dd");
            Date dataFormatada = new SimpleDateFormat("dd/MM/yyyy").parse(dataHora);
            String dataBD = formato.format(dataFormatada);
                            
            ps.setString(1, campoDescricao.getText());
            ps.setString(2, campoLaboratorio.getText());
            ps.setString(3, campoLote.getText());
            ps.setString(4, dataBD);
            ps.setString(5, campoObs.getText());
            ps.setString(6, campoID.getText());
            // Executa a acao para inserir o registro no banco
            ps.executeUpdate();
            // Mensagem de confirmacao do cadastro
            JOptionPane.showMessageDialog(null, "Cadastro da vacina atualizado!!");
            // Limpa campos
            //campoID.setText("");
            //campoNome.setText("");
            //campoCPF.setText("");
            // Finaliza conexao
            ps.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar registro!", "Erro", JOptionPane.ERROR_MESSAGE);
            System.out.println("Erro ao atualizar registro: " + e);
        }
    }
     
     public void excluirVacina() {
        try {
            // Conecta ao banco de dados
            Connection con = Conexao.conector();
            // Monta a consulta SQL e prepara para executar
            String sql = "delete from agendavacina.vacina where vc_id = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            // Define o ID que deve ser excluido
            ps.setString(1, campoID.getText());
            System.out.println("campo id "+campoID.getText());
            // Executa a acao para excluir o registro do banco
            ps.executeUpdate();
            // Mensagem de confirmacao do cadastro
            JOptionPane.showMessageDialog(null, "Vacina excluído com sucesso!");
            campoID.setText("");
            campoDescricao.setText("");
            campoLaboratorio.setText("");
            campoLote.setText("");
            campoValidade.setText("");
            
            
                      // Finaliza conexao
            ps.close();
            con.close();
        } catch (Exception e) {
        }
    }
     
        public boolean dataHoraValida(String dataHora) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/uuuu").withResolverStyle(ResolverStyle.STRICT);
            LocalDate d = LocalDate.parse(dataHora, formatter);
            System.out.println("Data/Hora valida: " + dataHora);
            return true;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Data/Hora invalida: " + dataHora);
            return false;
        }
    }
        
    public boolean isDataValida() {
        boolean valido = false;
        String dataHora = campoValidade.getText();
        if (!dataHoraValida(dataHora)) {
            JOptionPane.showMessageDialog(null, "Informe uma data e hora válida!");
        } else {
            valido = true;
        }
        return valido;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campoDescricao;
    private javax.swing.JTextField campoID;
    private javax.swing.JTextField campoLaboratorio;
    private javax.swing.JTextField campoLote;
    private javax.swing.JTextField campoObs;
    private javax.swing.JTextField campoValidade;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaVacina;
    // End of variables declaration//GEN-END:variables
}
